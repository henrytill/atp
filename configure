#!/bin/sh

set -e

PROJECT_ROOT="$(CDPATH= cd -- "$(dirname -- "$0")" && pwd -P)"

generate_test_setup_sh() {
  local build_dir="$1"

  local setup_sh="${PROJECT_ROOT}/test/setup.sh"
  :>"$setup_sh"

  cat >"$setup_sh" <<EOF
# This file has been generated by the configure script
alias atp="${build_dir}/bin/main.byte"
EOF
}

setup_out_of_tree_build() {
  local build_dir="$1"

  mkdir -p "$build_dir"

  for dir in bin lib test; do
    cp -asf "${PROJECT_ROOT}/${dir}" "${build_dir}/"
  done

  ln -sf "${PROJECT_ROOT}/GNUmakefile" "${build_dir}/GNUmakefile"

  find "$build_dir" -name .merlin -delete
}

check_python_module() {
  local module="$1"

  printf "checking for Python module %s... " "$module"

  python3 -c "import $module" >/dev/null 2>&1

  if [ $? -eq 0 ]; then
    printf "yes\n"
    return 0
  else
    printf "no\n"
    return 1
  fi
}

generate_config_mk() {
  local build_dir="$1"

  local config_mk="${build_dir}/config.mk"
  :>"$config_mk"

  if check_python_module "cram"; then
    printf "HAS_CRAM = true\n" >>"$config_mk"
  fi
}

generate_dot_merlin() {
  local build_dir="$1"

  local dot_merlin="${PROJECT_ROOT}/.merlin"
  :>"$dot_merlin"

  local build_path=$(realpath --relative-to="$PROJECT_ROOT" "$build_dir")

  cat >"$dot_merlin" <<EOF
S bin
S lib/intro
S lib/prop_logic
S test
B ${build_path}/bin
B ${build_path}/lib/intro
B ${build_path}/lib/prop_logic
B ${build_path}/test
EOF
}

generate_dot_ocamlinit() {
  local build_dir="$1"

  local dot_ocamlinit="${PROJECT_ROOT}/.ocamlinit"
  :>"$dot_ocamlinit"

  cat >"$dot_ocamlinit" <<EOF
(* This file has been generated by the configure script *)

#directory "+compiler-libs"

let () = try Topdirs.dir_directory (Sys.getenv "OCAML_TOPLEVEL_PATH") with Not_found -> ();;

#use "topfind"

#require "zarith"

#directory "${build_dir}/lib/intro"

#directory "${build_dir}/lib/prop_logic"

#load "intro.cma"

#load "prop_logic.cma"
EOF
}

usage() {
  printf "Usage: $0 [-d BUILD_DIR] [-h]\n"
  printf "  -d BUILD_DIR  Specify the build directory\n"
  printf "  -h            Display this help message\n"
}

main() {
  local build_dir="$PROJECT_ROOT" # Default to project root

  # Parse command-line arguments
  while [ $# -gt 0 ]; do
    case "$1" in
      -d)
        if [ -n "$2" ]; then
          build_dir=$(realpath "$2")
          shift 2
        else
          printf "Error: -d requires a directory argument.\n"
          exit 1
        fi
        ;;
      -h)
        usage
        exit 0
        ;;
      *)
        printf "Unknown option: $1\n"
        usage
        exit 1
        ;;
    esac
  done

  # Generate test/setup.sh
  generate_test_setup_sh "$build_dir"

  # If build_dir is different from PROJECT_ROOT, set up out-of-tree build
  printf "checking for out of tree build... "
  if [ "$build_dir" != "$PROJECT_ROOT" ]; then
    printf "yes\n"
    setup_out_of_tree_build "$build_dir"
  else
    printf "no\n"
  fi

  # Generate config.mk
  generate_config_mk "$build_dir"

  # Generate .merlin
  generate_dot_merlin "$build_dir"

  # Generate .ocamlinit
  generate_dot_ocamlinit "$build_dir"

  printf "Build directory: %s\n" "$build_dir"
  printf "OK\n"
}

main "$@"
