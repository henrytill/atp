#!/bin/sh

set -e

SRC_DIR="$(pwd)"
BUILD_DIR="$SRC_DIR"  # Default to source directory

check_python_module() {
  printf "checking for Python module %s... " "$1"
  python3 -c "import $1" >/dev/null 2>&1
  if [ $? -eq 0 ]; then
    printf "yes\n"
    return 0
  else
    printf "no\n"
    return 1
  fi
}

setup_out_of_tree_build() {
  mkdir -p "$BUILD_DIR"

  for dir in bin lib test; do
    cp -asf "${SRC_DIR}/${dir}" "${BUILD_DIR}/"
  done

  ln -sf "${SRC_DIR}/GNUmakefile" "${BUILD_DIR}/GNUmakefile"

  find "$BUILD_DIR" -name .merlin -delete
}

generate_config_mk() {
  config_mk="${BUILD_DIR}/config.mk"
  :>"$config_mk"

  if check_python_module "cram"; then
    printf "HAS_CRAM = true\n" >>"$config_mk"
  fi
}

generate_dot_merlin() {
  dot_merlin="${SRC_DIR}/.merlin"
  :>"$dot_merlin"

  build_path=$(realpath --relative-to="$SRC_DIR" "$BUILD_DIR")

  cat >"$dot_merlin" <<EOF
S bin
S lib/intro
S lib/prop_logic
S test
B ${build_path}/bin
B ${build_path}/lib/intro
B ${build_path}/lib/prop_logic
B ${build_path}/test
EOF
}

usage() {
  printf "Usage: $0 [-d BUILD_DIR] [-h]\n"
  printf "  -d BUILD_DIR  Specify the build directory\n"
  printf "  -h            Display this help message\n"
}

# Parse command-line arguments
while [ $# -gt 0 ]; do
  case "$1" in
    -d)
      if [ -n "$2" ]; then
        BUILD_DIR=$(realpath "$2")
        shift 2
      else
        printf "Error: -d requires a directory argument.\n"
        exit 1
      fi
      ;;
    -h)
      usage
      exit 0
      ;;
    *)
      printf "Unknown option: $1\n"
      usage
      exit 1
      ;;
  esac
done

# If BUILD_DIR is different from SRC_DIR, set up out-of-tree build
printf "checking for out of tree build... "
if [ "$BUILD_DIR" != "$SRC_DIR" ]; then
  printf "yes\n"
  setup_out_of_tree_build
else
  printf "no\n"
fi

# Generate config.mk
generate_config_mk

# Generate .merlin
generate_dot_merlin

printf "Build directory: %s\n" "$BUILD_DIR"
printf "OK\n"
